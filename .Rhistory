guide = "legend"
)+
xlab("Longitude") +
ylab("Latitude") +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size= 10, angle = 0),
axis.text.y = element_text(size= 10, angle = 0),
legend.title= element_blank(),
legend.key.size =  unit(0.05, 'cm'),
legend.background = element_rect(colour = "black", linetype='solid', fill = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.direction="vertical",
legend.position = c(0.8,0.70)
)
comm_data
ggplot(data = comm_data) +
geom_point(aes(x = longitude,
y = latitude,
size = fire_frequency
),
alpha = 0.20,
position = position_jitter(height= 0.15, width = 0.15)
) +
scale_size(
breaks = c(10,30, 60),
labels = c(10,30, 60)/10,
guide = "legend"
)+
xlab("Longitude") +
ylab("Latitude") +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size= 10, angle = 0),
axis.text.y = element_text(size= 10, angle = 0),
legend.title= element_blank(),
legend.key.size =  unit(0.05, 'cm'),
legend.background = element_rect(colour = "black", linetype='solid', fill = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.direction="vertical",
legend.position = c(0.8,0.70)
)
ggplot(data = comm_data) +
geom_point(aes(x = longitude,
y = latitude,
size = fire_frequency
),
alpha = 0.20,
position = position_jitter(height= 0.15, width = 0.15)
) +
scale_size(
breaks = c(1,3, 6),
labels = c(1,3, 6),
guide = "legend"
)+
xlab("Longitude") +
ylab("Latitude") +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size= 10, angle = 0),
axis.text.y = element_text(size= 10, angle = 0),
legend.title= element_blank(),
legend.key.size =  unit(0.05, 'cm'),
legend.background = element_rect(colour = "black", linetype='solid', fill = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.direction="vertical",
legend.position = c(0.8,0.70)
)
### export fire map
tiff("plots/fire_map.tiff", units="cm", width=7, height=7, res=600)
ggplot(data = comm_data) +
geom_point(aes(x = longitude,
y = latitude,
size = fire_frequency
),
alpha = 0.20,
position = position_jitter(height= 0.15, width = 0.15)
) +
scale_size(
breaks = c(1,3, 6),
labels = c(1,3, 6),
guide = "legend"
)+
xlab("Longitude") +
ylab("Latitude") +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size= 10, angle = 0),
axis.text.y = element_text(size= 10, angle = 0),
legend.title= element_blank(),
legend.key.size =  unit(0.05, 'cm'),
legend.background = element_rect(colour = "black", linetype='solid', fill = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.direction="vertical",
legend.position = c(0.8,0.70)
)
dev.off()
ggplot(data = comm_data  ) +
geom_point(aes(
x = burned,
y = fisher
)
)
ggplot(data = comm_data  ) +
geom_point(aes(
x = burned,
y = floristic_PCo1
)
)
ggplot(data = comm_data  ) +
geom_point(aes(
x = burned,
y = floristic_PCo2
)
)
ggplot(data = comm_data  ) +
geom_point(aes(
x = burned,
y = floristic_PCo1
)
)
model_fit = glm(
data = s_comm_data,
richness ~ (burned + seasonal_precipitation + soil_PC1+ soil_PC2),
family = poisson(link = "identity") # log, identity, and sqrt
)
summary(model_fit)
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### processing individual data
ind_data  =  ind_data %>%
filter(!is.na(sp)) %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### processing community data
comm_data  =  comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned
) %>%
mutate(trans_fire = log(fire_frequency)
)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
hist(comm_data$trans_fire)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned*10)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
### all explanatory vars
all_explanatory = c("fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
### all x-axis labels
all_xlabels = c("Fire frequency",
"Seasonal precipitation",
"Soil PC1",
"Soil PC2"
)
### check residual
check_resid = function(model){
N = model$dims$N
resid_n = resid(model)[1:N]
shapiro.test(resid_n)
}
### sp presence matrix
plot_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
### dissimilarity
distance = vegdist(plot_mtx[,-1], method = "bray")
exdistance = stepacross(dis = distance, path = "extended")
### pcoa
ord = pcoa(exdistance)
##
ord$values
sum(ord$values$Relative_eig)
### gls model
glm_fire1 = gls(
data = s_comm_data,
fire_frequeny ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### gls model
glm_fire1 = glm(
data = s_comm_data,
fire_frequeny ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### gls model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
s_comm_data
### gls model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
summary(glm_fire1)
plot(gls_fire1)
check_resid(model = glm_fire1)
glm_fire1
shapiro.test( residuals(glm_fire1) )
### maintained packages
if (!require("tidyverse")) install.packages("tidyverse"); require("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr"); library("ggpubr")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("nlme")) install.packages("nlme"); library("nlme")
if (!require("vegan")) install.packages("vegan"); library("vegan")
### my functions
source("scripts/function_model_plot.R")
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### processing individual data
ind_data  =  ind_data %>%
filter(!is.na(sp)) %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### processing community data
comm_data  =  comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned*10)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
### coordinates per plot
plot_coords = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### transforming in matrix
plot_coords_mtx = as.matrix(plot_coords[,-1])
rownames(plot_coords_mtx) = plot_coords$plot_id
### dissimilarity matrices
spp_dist = xdiss(plot_spp_mtx, method = "bray")
env_dist = dist(plot_env_mtx, method = "euclidean")
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
### all species names
spp_names = as.character(unique(ind_data$sp))
### species presence per plot
plot_spp = ind_data %>%
mutate(plot_id = as.character(plot_id)) %>%
group_by(plot_id) %>%
reframe(sp = as.character(unique(sp)), presence = 1) %>%
pivot_wider(names_from = sp,
names_expand = T,
values_from = presence,
values_fill = as.integer(0)
)
### transforming in matrix
plot_spp_mtx = as.matrix(plot_spp[,-1])
rownames(plot_spp_mtx) = plot_spp$plot_id
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
### coordinates per plot
plot_coords = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### transforming in matrix
plot_coords_mtx = as.matrix(plot_coords[,-1])
rownames(plot_coords_mtx) = plot_coords$plot_id
### dissimilarity matrices
spp_dist = xdiss(plot_spp_mtx, method = "bray")
env_dist = dist(plot_env_mtx, method = "euclidean")
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### dissimilarity matrices
spp_dist = diss(plot_spp_mtx, method = "bray")
env_dist = dist(plot_env_mtx, method = "euclidean")
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
(plot_spp_mtx
plot_spp_mtx
plot_spp_mtx
plot_spp_mtx
### dissimilarity matrices
spp_dist = diss(plot_spp_mtx, method = "bray")
### dissimilarity matrices
spp_dist = dist(plot_spp_mtx, method = "bray")
env_dist = dist(plot_env_mtx, method = "euclidean")
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
spp_dist
### dissimilarity matrices
spp_dist = dist(plot_spp_mtx, method = "bray")
### dissimilarity matrices
spp_dist = xdist(plot_spp_mtx, method = "bray")
plot_spp_mtx
plot_env_mtx
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = geo_dist,
method="pearson",
permutations=999
)
plot_env
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
plot_env
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
### coordinates per plot
plot_coords = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### transforming in matrix
plot_coords_mtx = as.matrix(plot_coords[,-1])
rownames(plot_coords_mtx) = plot_coords$plot_id
plot_env
plot_env_mtx
plot_env$plot_id
as.matrix(plot_env[,"fire_frequency"])
plot_fire_mtx = as.matrix(plot_env[,"fire_frequency"])
plot_precip_mtx = as.matrix(plot_env[,"seasonal_precipitation"])
plot_soil1_mtx = as.matrix(plot_env[,"soil_PC1"])
plot_soil2_mtx = as.matrix(plot_env[,"soil_PC2"])
### each environ var per plot
plot_fire_mtx = as.matrix(plot_env[,"fire_frequency"])
plot_precip_mtx = as.matrix(plot_env[,"seasonal_precipitation"])
plot_soil1_mtx = as.matrix(plot_env[,"soil_PC1"])
plot_soil2_mtx = as.matrix(plot_env[,"soil_PC2"])
rownames(plot_fire_mtx) =  plot_env$plot_id
rownames(plot_precip_mtx) =  plot_env$plot_id
rownames(plot_soil1_mtx) =  plot_env$plot_id
rownames(plot_soil2_mtx) =  plot_env$plot_id
plot_fire_mtx
fire_dist = dist(plot_fire_mtx, method = "euclidean")
precip_dist = dist(plot_precip_mtx, method = "euclidean")
soil1_dist = dist(plot_soil1_mtx, method = "euclidean")
soil2_dist = dist(plot_soil2_mtx, method = "euclidean")
### MANTEL
mantel.test(m1 = geo_dist,
m2 = fire_dist,
graph = FALSE,
nperm = 999,
alternative = "two.sided"
)
geo_dist
fire_dist
as.matrix(geo_dist)
### MANTEL
mantel.test(m1 = as.matrix(geo_dist),
m2 = as.matrix(fire_dist),
graph = FALSE,
nperm = 999,
alternative = "greater"
)
### MANTEL
mantel.test(m1 = as.matrix(geo_dist),
m2 = as.matrix(precip_dist),
graph = FALSE,
nperm = 999,
alternative = "greater"
)
### MANTEL
mantel.test(m1 = as.matrix(geo_dist),
m2 = as.matrix(soil1_dist),
graph = FALSE,
nperm = 999,
alternative = "greater"
)
### MANTEL
mantel.test(m1 = as.matrix(geo_dist),
m2 = as.matrix(soil2_dist),
graph = FALSE,
nperm = 999,
alternative = "greater"
)
library(mvpart)
install.packages("C:/Users/eduar/OneDrive/Desktop/GitHub/diversity_environment_Cerrado/0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
library(mvpart)
### dissimilarity matrices
spp_dist = xdiss(plot_spp_mtx, method = "binary")
### dissimilarity matrices
spp_dist = mvpart::xdiss(plot_spp_mtx, method = "binary")
