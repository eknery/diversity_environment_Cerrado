soil_PC2 = scale(soil_PC2)
)
ind_data
comm_data
################################ ordination ##################################
ind_data
ind_data %>%
pivot_wider(
cols = sp,
)
ind_data %>%
pivot_wider(
names_from =  sp,
)
View(ind_data)
ind_data %>%
mutate(
presence = 1
)
ind_data %>%
mutate(
presence = 1
) %>%
pivot_wider(
names_from =  sp,
values_from = presence,
values_fill = T
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
pivot_wider(
names_from =  sp,
values_from = presence,
values_fill = T
)
View(ind_mtx)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot, sp, presence)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot, sp, presence) %>%
pivot_wider(
names_from =  sp,
values_from = presence,
values_fill = 0
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot, sp, presence) %>%
pivot_wider(
names_from =  sp,
values_from = presence,
values_fill = NA
)
View(ind_mtx)
ind_data %>%
mutate(
presence = 1
) %>%
select(plot, sp, presence)
ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = presence,
values_fill = 0
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = presence
)
View(ind_data)
ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = plot,
values_fill = 0
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `plot`,
values_fill = 0
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, plot) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `plot`,
values_fill = 0
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, plot) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `plot`,
values_fill = T
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp, plot) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `plot`
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp,presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `plot`
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp,presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `presence`
)
ind_mtx = ind_data %>%
mutate(
presence = 1
) %>%
select(plot_id, sp,presence) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = `presence`
)
View(ind_mtx)
ind_data %>%
group_by(plot_id, sp) %>%
reframe(n())
ind_data %>%
ind_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n))
ind_data %>%
ind_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
ind_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n))
ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n))
ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
### sp presence matrix
ind_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
### old package
install.packages("0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
require("mvpart")
library("mvpart")
### old package
install.packages("0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
mvpart::xdiss(data, dcrit = 1, dauto = TRUE, dinf = 0.5, method = "man",
### sp presence matrix
plot_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
ggplot(data = comm_data) +
geom_point(aes(x = fire_frequency,
y = density
),
alpha = 0.20
) +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title.x = element_text(size=12, face="bold"),
axis.title.y = element_text(size=12, face="bold"),
axis.text.x = element_text(size= 10, angle = 0),
axis.text.y = element_text(size= 10, angle = 0),
legend.title= element_blank(),
legend.key.size =  unit(0.05, 'cm'),
legend.background = element_rect(colour = "black", linetype='solid', fill = NA),
legend.key = element_rect(colour = NA, fill = NA),
legend.direction="vertical",
legend.position = c(0.8,0.70)
)
mvpart::xdiss(data = plot_mtx,
dcrit = 1,
dauto = TRUE,
dinf = 0.5,
method = "bray")
########################## LOADING LIBRARIES ##################################
install.packages("rstan", repos = c('https://stan-dev.r-universe.dev', getOption("repos")))
### old package
install.packages("0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
########################## LOADING LIBRARIES ##################################
install.packages("devtools")
devtools::install_github("cran/mvpart")
install.packages("0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
vegdist(plot_mtx, method = "bray")
plot_mtx
vegdist(plot_mtx[,-1], method = "bray")
plot_dist = vegdist(plot_mtx[,-1], method = "bray")
### dissimilarity
distance = vegdist(plot_mtx[,-1], method = "bray")
stepacross(dis = distance, path = "extended")
exdistance = stepacross(dis = distance, path = "extended")
(plot_mtx[,-1]
plot_mtx[,-1]
metaNMDS(comm = exdistance, k 2)
metaNMDS(comm = exdistance, k =2)
metaMDS(comm = exdistance, k =2)
nmds = metaMDS(comm = exdistance, k =2)
plot(nmds)
nmds$data
nmds$species
View(nmds)
## nMDS
ord = pcoa(exdistance)
if (!require("ape")) install.packages("ape"); library("ape")
## nMDS
ord = pcoa(exdistance)
plot(ord)
ord$values
ord$vectors
plot(ord$vectors[,1], ord$vectors[,2])
##
ord$values
sum(ord$values$Relative_eig)
##
ord$values
### maintained packages
if (!require("tidyverse")) install.packages("tidyverse"); require("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr"); library("ggpubr")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("nlme")) install.packages("nlme"); library("nlme")
if (!require("vegan")) install.packages("vegan"); library("vegan")
### my functions
source("scripts/function_model_plot.R")
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### processing individual data
ind_data  =  ind_data %>%
filter(!is.na(sp)) %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### processing community data
comm_data  =  comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = case_when(
fire_frequency == 0 ~ 0.1,
TRUE                ~ fire_frequency
)
) %>%
mutate(trans_fire = log(fire_frequency) )
### scaled predictors
s_comm_data = comm_data %>%
mutate(
fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
### all explanatory vars
all_explanatory = c("fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
### all x-axis labels
all_xlabels = c("Fire frequency",
"Seasonal precipitation",
"Soil PC1",
"Soil PC2"
)
### check residual
check_resid = function(model){
N = model$dims$N
resid_n = resid(model)[1:N]
shapiro.test(resid_n)
}
###### FISRT AXIS
hist( comm_data$floristic_PCo1 )
### species compostion model 1
gls_comp1 = gls(data = s_comm_data,
(floristic_PCo1) ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_comp1)
plot(gls_comp1)
check_resid(model = gls_comp1)
###### composition2 plots
comp1_plots = list()
###### SECOND AXIS
hist(comm_data$floristic_PCo2)
### species compostion model 2
gls_comp2 = gls(data = s_comm_data ,
floristic_PCo2 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
### summary model
summary(gls_comp2)
plot(gls_comp2)
check_resid(model = gls_comp2)
### my functions
source("scripts/function_model_plot.R")
### plots
for(i in 1:length(all_explanatory) ){
comp2_plots[[i]] = model_plot(data = s_comm_data,
x = all_explanatory[i],
y = "floristic_PCo2",
model = gls_comp2,
relationship = comp2_relationships[i],
x_label = all_xlabels[i],
y_label = "Floristic PCo2")
}
###### composition2 plots
comp2_plots = list()
comp2_relationships = c("linear","none", "none", "none")
### plots
for(i in 1:length(all_explanatory) ){
comp2_plots[[i]] = model_plot(data = s_comm_data,
x = all_explanatory[i],
y = "floristic_PCo2",
model = gls_comp2,
relationship = comp2_relationships[i],
x_label = all_xlabels[i],
y_label = "Floristic PCo2")
}
tiff("plots/comp2_plots.tiff", units="cm", width=14, height=14, res=600)
ggarrange(comp2_plots[[1]], comp2_plots[[2]], comp2_plots[[3]], comp2_plots[[4]],
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
dev.off()
### gls model
gls_fire1 = gls(
data = s_comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "ML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_fire1)
plot(gls_fire1)
check_resid(model = gls_fire1)
###### fire plots
fire_plots = list()
fire_relationships = c("none","linear", "linear", "none")
### plots
for(i in 2:length(all_explanatory) ){
fire_plots[[i]] = model_plot(data = s_comm_data,
x = all_explanatory[i],
y = "trans_fire",
model = gls_fire1,
relationship = fire_relationships[i],
x_label = all_xlabels[i],
y_label = "ln(Fire frequency)")
}
### export plots
tiff("plots/fire_plots.tiff", units="cm", width=14, height=14, res=600)
ggarrange(fire_plots[[2]], fire_plots[[2]],fire_plots[[3]], fire_plots[[4]],
labels = c("", "A", "B", "C"),
ncol = 2, nrow = 2)
dev.off()
##### species richeness
hist(log(comm_data$richness) )
### species richness model
gls_rich1 = gls(
data = s_comm_data,
log(richness) ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
### model summary
summary(gls_rich1)
plot(gls_rich1)
check_resid(model = gls_rich1)
###### richness plots
rich_plots = list()
rich_relationships = c("linear","linear", "none", "none")
### plots
for(i in 1:length(all_explanatory) ){
rich_plots[[i]] = model_plot(data = s_comm_data %>% mutate(richness = log(richness)),
x = all_explanatory[i],
y = "richness",
model = gls_rich1,
relationship = rich_relationships[i],
x_label = all_xlabels[i],
y_label = "ln(N species per plot)")
}
tiff("plots/richness_plots.tiff", units="cm", width=14, height=14, res=600)
ggarrange(rich_plots[[1]], rich_plots[[2]], rich_plots[[3]], rich_plots[[4]],
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
dev.off()
hist(comm_data$fisher)
### species diversity model
gls_fish1 = gls(data = s_comm_data,
log(fisher) ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
### model summary
summary(gls_fish1)
plot(gls_fish1)
check_resid(model = gls_fish1)
###### richness plots
fish_plots = list()
fish_relationships = c("linear","linear", "none", "none")
### plots
for(i in 1:length(all_explanatory) ){
fish_plots[[i]] = model_plot(data = s_comm_data %>% mutate(fisher = log(fisher)),
x = all_explanatory[i],
y = "fisher",
model = gls_fish1,
relationship = fish_relationships[i],
x_label = all_xlabels[i],
y_label = "ln(Fisher's alpha)")
}
tiff("plots/fisher_plots.tiff", units="cm", width=14, height=14, res=600)
ggarrange(fish_plots[[1]], fish_plots[[2]], fish_plots[[3]], fish_plots[[4]],
labels = c("A", "B", "C", "D"),
ncol = 2, nrow = 2)
dev.off()
