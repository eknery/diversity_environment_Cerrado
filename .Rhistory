###
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
select("plot_id", "fire_frequency")
###
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
select(c("plot_id", "fire_frequency") )
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dyplr::select(any_of(c("plot_id", "fire_frequency") ) )
###
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
select(any_of(c("plot_id", "fire_frequency") ) )
??select
###
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id", "fire_frequency") ) )
###
plot_fire = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id", "fire_frequency") ) )
plot_fire_mtx = as.matrix(plot_fire[,-1])
rownames(plot_fire_mtx) = plot_fire$plot_id
fire_dist = distance(plot_fire_mtx, "euclidean")
??mantel.rtest
fire_dist
if (!require("ape")) install.packages("ape"); library("ape")
ape::mantel.test(spp_dist, fire_dist,
nperm = 999,
graph = T)
ape::mantel.test(spp_dist, fire_dist,
nperm = 999,
alternative = "greater",
graph = T)
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
plot_env_mtx
env_dist = distance(plot_fire_mtx, "euclidean")
ape::mantel.test(spp_dist, env_dist,
nperm = 999,
alternative = "greater",
graph = T)
env_dist
fire_dist
fire_dist
plot_env_mtx
env_dist = distance(plot_env_mtx, "euclidean")
ape::mantel.test(spp_dist, env_dist,
nperm = 999,
alternative = "greater",
graph = T)
if (!require("nlme")) install.packages("nlme"); library("nlme")
if (!require("philentropy")) install.packages("philentropy"); library("philentropy")
if (!require("ape")) install.packages("ape"); library("ape")
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### transforming fire
comm_data = comm_data %>%
mutate(trans_fire = fire_frequency^(1/3) )
### check residual
check_resid = function(model){
N = model$dims$N
resid_n = resid(model)[1:N]
shapiro.test(resid_n)
}
### my model
gls_fire1 = gls(data = comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_fire1)
plot(gls_fire1)
check_resid(model = gls_fire1)
### alternative model
gls_fire2 = gls(data = comm_data,
trans_fire ~ site,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_fire2)
### simple model
gls_rich1 = gls(data = comm_data,
richness ~ fire_frequency,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_rich1)
plot(gls_rich1)
check_resid(model = gls_rich1)
summary(gls_rich1)
### full model
gls_rich2 = gls(data = comm_data,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_rich2)
### simple model
gls_div1 = gls(data = comm_data,
fisher ~ fire_frequency,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_div1)
### full model
gls_div2 = gls(data = comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_div2)
ape::mantel.test(spp_dist, env_dist,
nperm = 999,
alternative = "greater",
graph = T)
########################## LOADING LIBRARIES ##################################
if (!require("tidyverse")) install.packages("tidyverse"); require("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("nlme")) install.packages("nlme"); library("nlme")
if (!require("philentropy")) install.packages("philentropy"); library("philentropy")
if (!require("ape")) install.packages("ape"); library("ape")
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### removing non-used info from species data
ind_data  =  ind_data %>%
filter(!is.na(sp))
### transforming fire
comm_data = comm_data %>%
mutate(trans_fire = fire_frequency^(1/3) )
### all species names
spp_names = as.character(unique(ind_data$sp))
### species presence per plot
plot_spp = ind_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
group_by(plot_id) %>%
reframe(sp = as.character(unique(sp)), presence = 1) %>%
pivot_wider(names_from = sp,
names_expand = T,
values_from = presence,
values_fill = as.integer(0)
)
### transforming in matrix
plot_spp_mtx = as.matrix(plot_spp[,-1])
rownames(plot_spp_mtx) = plot_spp$plot_id
### fire per plot
plot_fire = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id", "fire_frequency") ) )
### transforming in matrix
plot_fire_mtx = as.matrix(plot_fire[,-1])
rownames(plot_fire_mtx) = plot_fire$plot_id
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
### dissimilarity matrices
spp_dist = distance(plot_spp_mtx, "sorensen")
fire_dist = distance(plot_fire_mtx, "euclidean")
env_dist = distance(plot_env_mtx, "euclidean")
ape::mantel.test(spp_dist, env_dist,
nperm = 999,
alternative = "greater",
graph = T)
gls_fire0 = gls(data = comm_data,
trans_fire ~ 1,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_fire1)
summary(gls_fire0)
plot(gls_fire0)
check_resid(model = gls_fire0)
### check residual
check_resid = function(model){
N = model$dims$N
resid_n = resid(model)[1:N]
shapiro.test(resid_n)
}
check_resid(model = gls_fire0)
summary(gls_fire0)
### my model
gls_fire1 = gls(data = comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_fire1)
install.packages("D:/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
install.packages("Downloads:/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
install.packages("0_dados/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
install.packages("0_data/mvpart_1.6-2.tar.gz", repos = NULL, type = "source")
require("mvpart")
?mvpart
### dissimilarity matrices
spp_dist = xdiss(plot_spp_mtx, method = "bray")
class(spp_dits)
class(spp_dist)
xdiss(plot_fire_mtx, method = "euclidean")
??
dist(plot_fire_mtx, method = "euclidean")
env_dist = dist(plot_env_mtx, method = "euclidean")
fire_dist = dist(plot_fire_mtx, method = "euclidean")
### MANTEL
ape::mantel.test(spp_dist, env_dist,
nperm = 999,
alternative = "greater",
graph = T)
if (!require("vegan")) install.packages("vegan"); library("vegan")
comm_data %>%
select(longitude, latitude)
comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### coordinates per plot
plot_coords = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### transforming in matrix
plot_coords_mtx = as.matrix(plot_coords[,-1])
rownames(plot_coords_mtx) = plot_coords$plot_id
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dits,
zdis = geo_dist,
method="pearson",
permutations=999
)
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=999
)
mantel_test
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
mantel_test
### MANTEL
mantel_test = vegan::mantel.partial(
ydis = env_dist,
xdis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
mantel_test
plot(spp_dist, geo_dist)
plot(env_dist, spp_dist)
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
mantel_test
### fire per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
env_dist = dist(plot_env_mtx, method = "euclidean")
### MANTEL
mantel_test = vegan::mantel.partial(
xdis = env_dist,
ydis = spp_dist,
zdis = geo_dist,
method="pearson",
permutations=9999
)
plot(env_dist, spp_dist)
mantel_test
View(comm_data)
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = TRUE))
summary(gls_abund1)
plot(gls_rich2)
plot(gls_abund1)
check_resid(model = gls_abund1)
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corGaus(form = ~ longitude + latitude, nugget = FALSE))
summary(gls_abund1)
plot(gls_abund1)
check_resid(model = gls_abund1)
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corAR1(form = ~ longitude + latitude, nugget = FALSE))
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corAR1(form = ~ longitude + latitude))
summary(gls_abund1)
plot(gls_abund1)
check_resid(model = gls_abund1)
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corARMA(form = ~ longitude + latitude))
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLIN(form = ~ longitude + latitude))
gls_abund1 = gls(data = comm_data,
density ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_abund1)
plot(gls_abund1)
check_resid(model = gls_abund1)
##### abundance
hist(comm_data$density)
### full model
gls_rich2 = gls(data = comm_data,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude, nugget = TRUE))
### full model
gls_rich2 = gls(data = comm_data,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_rich2)
### full model
gls_rich2 = gls(
data = scale(comm_data),
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
comm_data
### simple model
gls_div1 = gls(data = comm_data,
fisher ~ fire_frequency,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_div1)
### full model
gls_div2 = gls(data = comm_data,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_div2)
### my model
gls_fire1 = gls(data = comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
### transforming fire
comm_data = comm_data %>%
mutate(trans_fire = fire_frequency^(1/3) )
### my model
gls_fire1 = gls(data = comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_fire1)
### full model
gls_comp1 = gls(data = comm_data,
floristic_PCo1 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_comp1)
plot(gls_comp1)
check_resid(model = gls_comp1)
hist(comm_data$floristic_PCo1)
hist(sqrt(comm_data$floristic_PCo1) )
hist( comm_data$floristic_PCo1^(1/3)) )
hist( comm_data$floristic_PCo1^(1/3) )
plot( comm_data$floristic_PCo1 )
hist( comm_data$floristic_PCo1 )
hist( comm_data$floristic_PCo2 )
### full model
gls_comp1 = gls(data = comm_data,
floristic_PCo2 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_comp1)
ggplo(comm_data)+
geom_point(aes(x= floristic_PCo1, y=floristic_PCo2, color= fire_frquency))
ggplot(comm_data)+
geom_point(aes(x= floristic_PCo1, y=floristic_PCo2, color= fire_frquency))
ggplot(comm_data)+
geom_point(aes(x= floristic_PCo1, y=floristic_PCo2, color= fire_frequency))
ggplot(comm_data)+
geom_point(aes(x= floristic_PCo1, y=floristic_PCo2, size= fire_frequency))
summary(gls_comp1)
plot(gls_comp1)
check_resid(model = gls_comp1)
summary(gls_fire1)
gls_abund1
summary(gls_abund1)
summary(gls_rich1)
### full model
gls_rich1 = gls(
data = scale(comm_data),
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
comm_data %>%
mutate(scale(fire_frequency))
scale_comm = comm_data %>%
mutate(fire_frequency =scale(fire_frequency),
seasonal_precipitation= scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
### full model
gls_rich1 = gls(
data = scale_comm,
richness ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_rich1)
### my model
gls_fire1 = gls(
data = scale_comm,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_fire1)
summary(gls_rich1)
### full model
gls_div1 = gls(data = scale_comm,
fisher ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_div1)
summary(gls_rich1)
summary(gls_div1)
### species compostion model
gls_comp1 = gls(data = scale_comm,
floristic_PCo2 ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude))
summary(gls_comp1)
