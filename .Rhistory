### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned # fire_outbreak or burned
) %>%
mutate(trans_fire = sqrt(fire_frequency)
)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
hist(comm_data$trans_fire)
hist(comm_data$fire_frequency)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned # fire_outbreak or burned
) %>%
mutate(trans_fire = asin(sqrt(fire_frequency))
)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
hist(comm_data$trans_fire)
hist(comm_data$fire_frequency)
hist(comm_data$trans_fire)
### all explanatory vars
all_explanatory = c("fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
### all x-axis labels
all_xlabels = c("Fire frequency",
"Seasonal precipitation",
"Soil PC1",
"Soil PC2"
)
### check residual
check_resid = function(model){
N = model$dims$N
resid_n = resid(model)[1:N]
shapiro.test(resid_n)
}
### sp presence matrix
plot_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
### dissimilarity
distance = vegdist(plot_mtx[,-1], method = "bray")
exdistance = stepacross(dis = distance, path = "extended")
### pcoa
ord = pcoa(exdistance)
ord$values
sum(ord$values$Relative_eig)
### gls model
gls_fire1 = gls(
data = s_comm_data,
trans_fire ~ seasonal_precipitation + soil_PC1 + soil_PC2,
method = "ML",
correlation = corLin(form = ~ longitude + latitude)
)
summary(gls_fire1)
summary(gls_fire1)
### species richness model
gls_rich1 = gls(
data = s_comm_data,
log(richness) ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude, nugget = TRUE)
)
### model summary
summary(gls_rich1)
gls_abund1 = gls(
data = s_comm_data,
density ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude)
)
summary(gls_abund1)
gls_abund1 = gls(
data = s_comm_data,
density ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
correlation = corLin(form = ~ longitude + latitude)
)
gls_abund1 = gls(
data = s_comm_data,
density ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude,  nugget = TRUE)
)
summary(gls_abund1)
plot(gls_abund1)
check_resid(model = gls_abund1)
hist(log(comm_data$fisher) )
### species diversity model
gls_fish1 = gls(
data = s_comm_data,
log(fisher) ~ fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude,nugget = TRUE)
)
### model summary
summary(gls_fish1)
plot(gls_fish1)
check_resid(model = gls_fish1)
### species compostion model 1
gls_comp1 = gls(
data = s_comm_data,
floristic_PCo1 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude)
)
summary(gls_comp1)
plot(gls_comp1)
check_resid(model = gls_comp1)
### species compostion model 2
gls_comp2 = gls(
data = s_comm_data ,
floristic_PCo2 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
method = "REML",
correlation = corLin(form = ~ longitude + latitude)
)
### summary model
summary(gls_comp2)
plot(gls_comp2)
check_resid(model = gls_comp2)
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### processing individual data
ind_data  =  ind_data %>%
filter(!is.na(sp)) %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### processing community data
comm_data  =  comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
### all explanatory vars
all_explanatory = c("fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
### all x-axis labels
all_xlabels = c("Fire frequency",
"Seasonal precipitation",
"Soil PC1",
"Soil PC2"
)
### all species names
spp_names = as.character(unique(ind_data$sp))
### species presence per plot
plot_spp = ind_data %>%
mutate(plot_id = as.character(plot_id)) %>%
group_by(plot_id) %>%
reframe(sp = as.character(unique(sp)), presence = 1) %>%
pivot_wider(names_from = sp,
names_expand = T,
values_from = presence,
values_fill = as.integer(0)
)
### transforming in matrix
plot_spp_mtx = as.matrix(plot_spp[,-1])
rownames(plot_spp_mtx) = plot_spp$plot_id
### environment per plot
plot_env = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
mutate(plot_id = as.character(plot_id)) %>%
dplyr::select(any_of(c("plot_id",
"fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
)
)
### transforming in matrix
plot_env_mtx = as.matrix(plot_env[,-1])
rownames(plot_env_mtx) = plot_env$plot_id
### each environ var per plot
plot_fire_mtx = as.matrix(plot_env[,"fire_frequency"])
plot_precip_mtx = as.matrix(plot_env[,"seasonal_precipitation"])
plot_soil1_mtx = as.matrix(plot_env[,"soil_PC1"])
plot_soil2_mtx = as.matrix(plot_env[,"soil_PC2"])
rownames(plot_fire_mtx) =  plot_env$plot_id
rownames(plot_precip_mtx) =  plot_env$plot_id
rownames(plot_soil1_mtx) =  plot_env$plot_id
rownames(plot_soil2_mtx) =  plot_env$plot_id
### coordinates per plot
plot_coords = comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE) %>%
select("plot_id", "longitude", "latitude")
### transforming in matrix
plot_coords_mtx = as.matrix(plot_coords[,-1])
rownames(plot_coords_mtx) = plot_coords$plot_id
### dissimilarity matrices
env_dist = dist(plot_env_mtx, method = "euclidean")
fire_dist = dist(plot_fire_mtx, method = "euclidean")
precip_dist = dist(plot_precip_mtx, method = "euclidean")
soil1_dist = dist(plot_soil1_mtx, method = "euclidean")
soil2_dist = dist(plot_soil2_mtx, method = "euclidean")
geo_dist = dist(plot_coords_mtx, method = "euclidean")
### MANTEL
mantel.test(m1 = as.matrix(geo_dist),
m2 = as.matrix(env_dist),
graph = FALSE,
nperm = 999,
alternative = "greater"
)
### sp presence matrix
plot_mtx = ind_data %>%
group_by(plot_id, sp) %>%
reframe(n = n()) %>%
mutate(n = case_when(n >1 ~ 1, T ~ n)) %>%
pivot_wider(
names_from =  sp,
names_expand = T,
values_from = n,
values_fill = 0
)
### dissimilarity
distance = vegdist(plot_mtx[,-1], method = "bray")
exdistance = stepacross(dis = distance, path = "extended")
### pcoa
ord = pcoa(exdistance)
##
ord$values
### glm model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### glm model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = binomial()
)
### glm model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma()
)
summary(glm_fire1)
plot(glm_fire1)
shapiro.test( residuals(glm_fire1) )
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2 * site,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ (s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2)/site,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
### model summary
summary(glm_rich1)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
View(s_comm_data)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma()
)
### model summary
summary(glm_fish1)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma(link = "inverse")
)
### model summary
summary(glm_fish1)
### species diversity model
glm_fish1 = glm(
data = s_comm_data,
fisher ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma(link = "log")
)
### model summary
summary(glm_fish1)
shapiro.test(resid(glm_fish1))
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma(link = "log")
)
### model summary
summary(glm_rich1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = Gamma(link = "log")
)
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "log")
)
### species compostion model 1
glm_comp1 = glm(
data = s_comm_data,
floristic_PCo1 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "inverse")
)
summary(glm_comp1)
summary(glm_comp1)
shapiro.test(resid(glm_comp1) )
### species compostion model 2
glm_comp2 = glm(
data = s_comm_data ,
floristic_PCo2 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "inverse")
)
### species compostion model 2
glm_comp2 = glm(
data = s_comm_data ,
floristic_PCo2 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "identity")
)
### summary model
summary(glm_comp2)
### species compostion model 2
glm_comp2 = glm(
data = s_comm_data ,
floristic_PCo2 ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = gaussian(link = "log")
)
### maintained packages
if (!require("tidyverse")) install.packages("tidyverse"); require("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if (!require("ggpubr")) install.packages("ggpubr"); library("ggpubr")
if (!require("ape")) install.packages("ape"); library("ape")
if (!require("nlme")) install.packages("nlme"); library("nlme")
if (!require("vegan")) install.packages("vegan"); library("vegan")
### my functions
source("scripts/function_model_plot.R")
### environmental data
comm_data = read.csv("0_data/comm_data.csv", sep=",", h=T)
head(comm_data)
### species data
ind_data = read.csv("0_data/ind_data.csv", sep=",", h=T, stringsAsFactors = T)
head(ind_data)
### processing individual data
ind_data  =  ind_data %>%
filter(!is.na(sp)) %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### processing community data
comm_data  =  comm_data %>%
unite("plot_id", site, plot, sep="_", remove = FALSE)
### transforming fire
comm_data = comm_data %>%
mutate(fire_frequency = burned)
### scaled predictors
s_comm_data = comm_data %>%
mutate(
s_fire_frequency = scale(fire_frequency),
seasonal_precipitation = scale(seasonal_precipitation),
soil_PC1 = scale(soil_PC1),
soil_PC2 = scale(soil_PC2)
)
hist(comm_data$fire_frequency)
### all explanatory vars
all_explanatory = c("fire_frequency",
"seasonal_precipitation",
"soil_PC1",
"soil_PC2"
)
### all x-axis labels
all_xlabels = c("Fire frequency",
"Seasonal precipitation",
"Soil PC1",
"Soil PC2"
)
### glm model
glm_fire1 = glm(
data = s_comm_data,
fire_frequency ~ seasonal_precipitation + soil_PC1 + soil_PC2 + site,
family = Gamma()
)
summary(glm_fire1)
summary(glm_fire1)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2,
family = poisson(link = "identity")
)
### species richness model
glm_rich1 = glm(
data = s_comm_data,
richness ~ s_fire_frequency + seasonal_precipitation + soil_PC1 + soil_PC2 + site,
family = poisson(link = "identity")
)
### model summary
summary(glm_rich1)
library("seqinr")
f = read.fasta("sequence.fasta")
wd
getwd()
getwd(C:/Users/eduar/OneDrive/Documents/)
getwd("C:/Users/eduar/OneDrive/Documents/")
setwd("C:/Users/eduar/OneDrive/Documents/")
getwd()
f = read.fasta("sequence.fasta")
names(f)
f = read.fasta("sequence.fasta")
names(f)
raw_names = names(f)
gsub("lcl|NC_031882.1_cds_YP_009319281.*", "",raw_names)
gsub("lcl|NC_*_cds_YP_*", "",raw_names)
raw_names
gsub("^.*\[gene=```", "",raw_names)
gsub("^.*\[gene=", "",raw_names)
gsub("^.*\\[gene=", "gene=", raw_names)
names1 = gsub("^.*\\[gene=", "gene=", raw_names)
gsub("\\].*$", "", names1)
names2 = gsub("\\].*$", "", names1)
clean_names = gsub("genes=", "", names2)
clean_names
names1 = gsub("^.*\\[gene=", "gene=", raw_names)
names2 = gsub("\\].*$", "", names1)
clean_names = gsub("genes=", "", names2)
clean_names
clean_names = gsub("gene=", "", names2)
clean_names
names(f) = clean_names
View(f)
f
clean_names
f = read.fasta("sequence.fasta")
f
write.fasta(f, names = clean_names, file.out ="new.fasta")
clean_names
clean_names == rps12
clean_names == "rps12"
f[1]
f[46]
